syntax = "proto3";
package protos;
option go_package = "gfs/chunkserver/protos";

service ChunkServer {
  // Reads a range of bytes in a chunk.
  rpc Read(ReadRequest) returns (ReadReply) {}
  // Receive potential write data from clients.
  rpc ReceiveWriteData(WriteDataBundle) returns (Ack) {}
  // Commits a mutation operation on primary.
  rpc PrimaryCommitMutate(PrimaryCommitMutateRequest) returns (Ack) {}
  // Commits a mutation operation on secondary.
  rpc SecondaryCommitMutate(SecondaryCommitMutateRequest) returns (Ack) {}
  // Creates a new chunk.
  rpc CreateNewChunk(ChunkHandle) returns (Ack) {}
  // Receive a lease for a chunk
  rpc ReceiveLease(LeaseBundle) returns (Ack) {}
}

// The reply message containing the data from a file read.
message ReadReply {
  string data = 1;
}

// The request message containing the arguments to a read request.
message ReadRequest {
  int32 l = 1;
  int32 r = 2;
  uint64 ch = 3;
}

// A message containing a chunk handle
message ChunkHandle {
  uint64 ch = 1;
}

message PrimaryCommitMutateRequest {
  repeated string secondaryChunkServerAddresses = 1;
  string txId = 2;
  uint64 ch = 3;
}

message SecondaryCommitMutateRequest {
  repeated string txIds = 1;
  uint64 ch = 2;
}

// A reply message containing an acknowledgement
message Ack {
  string message = 1;
}

// A request message containing potential mutation data from clients.
message WriteDataBundle {
  bytes data = 1;
  string txId = 2;
  uint64 size = 3;
  uint64 offset = 4;
  uint64 ch = 5;
}

// A request message containing a lease for a chunk
message LeaseBundle {
  int64 timeEnd = 1;
  uint64 ch = 2;
}

