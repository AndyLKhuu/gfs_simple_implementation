syntax = "proto3";
package master;
option go_package = "gfs/master/protos";

service Master {
  // Sends a heart beat message to the client
  rpc SendHeartBeatMessage (ChunkServerID) returns (Ack) {}
  // Retrieves the chunk handler of a chunk and the locations of its replicas
  rpc GetChunkLocation(ChunkLocationRequest) returns (ChunkLocationReply) {}
  // Retrieve the fixed system chunksize
  rpc GetSystemChunkSize(SystemChunkSizeRequest) returns (ChunkSize) {}
  // ClientWriteRequest
  rpc ReceiveClientWriteRequest(ClientWriteRequest) returns (Ack) {} 
  // Create a file.
  rpc CreateFile(FileCreateRequest) returns (Ack) {}
  // Remove a file.
  rpc RemoveFile(FileRemoveRequest) returns (Ack) {}
  // Renew lease on chunk.
  rpc RenewChunkLease(RenewChunkLeaseRequest) returns (Ack) {}
}

message FileCreateRequest {
  string path = 1;
  int64 repFactor = 2;
}

message FileRemoveRequest {
  string path = 1;
}

message ChunkHandle {
  uint64 ch = 1;
}

message RenewChunkLeaseRequest {
  uint64 ch = 1;
  string addr = 2;
}

// The request message containing the user's name.
message ChunkServerID {
  int64 id = 1;
}

// The reply message containing the system's fixed chunk size.
message ChunkSize {
  int64 size = 1;
}

// The place holder message for a client write request.
message ClientWriteRequest {}

// The empty message for a client's inquiry on the system chunk size.
message SystemChunkSizeRequest {}

// The request message for a file's chunk size
message ChunkLocationRequest {
  string path = 1;
  int32 chunkIdx = 2;
}

// The reply message for a file's chunk handler and its replica locations.
// TO:DO Update Message to distinguish the primary chunkserver ID
message ChunkLocationReply {
  uint64 chunkHandle = 1;
  string primary = 2;
  repeated string chunkServerIds = 3;
}
  
// The response message acknowledging a transaction.
message Ack {
  string message = 1;
}